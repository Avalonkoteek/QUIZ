{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\fepif\\\\Desktop\\\\projects\\\\quiz\\\\QUIZ\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\fepif\\\\Desktop\\\\projects\\\\quiz\\\\QUIZ\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"../../axios/axios-quiz\";\nimport { FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZ_SUCCESS, QUIZ_SET_STATE, FINISH_QUIZ, QUIZ_NEXT_QUESTION, QUIZ_RETRY } from \"./actionTypes\"; // QUIZ LIST\n\nexport function fetchQuizes() {\n  return (/*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n        var response, quizes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(fetchQuizesStart());\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get(\"/quizes.json\");\n\n            case 4:\n              response = _context.sent;\n              quizes = [];\n              Object.keys(response.data).forEach((key, index) => {\n                quizes.push({\n                  id: key,\n                  name: \"\\u0422\\u0435\\u0441\\u0442 \\u2116\".concat(index + 1)\n                });\n              });\n              dispatch(fetchQuizesSuccess(quizes));\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(fetchQuizesError(_context.t0));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n} // QUIZ\n\nexport function fetchQuizById(quizId) {\n  return (/*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response, quiz;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch(fetchQuizesStart());\n              _context2.prev = 1;\n              _context2.next = 4;\n              return axios.get(\"/quizes/\".concat(quizId, \".json\"));\n\n            case 4:\n              response = _context2.sent;\n              quiz = response.data;\n              dispatch(fetchQuizSuccess(quiz));\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              dispatch(fetchQuizesError(_context2.t0));\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 9]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function fetchQuizSuccess(quiz) {\n  return {\n    type: FETCH_QUIZ_SUCCESS,\n    quiz\n  };\n}\nexport function fetchQuizesStart() {\n  return {\n    type: FETCH_QUIZES_START\n  };\n}\nexport function fetchQuizesSuccess(quizes) {\n  return {\n    type: FETCH_QUIZES_SUCCESS,\n    quizes\n  };\n}\nexport function fetchQuizesError(e) {\n  return {\n    type: FETCH_QUIZES_ERROR,\n    error: e\n  };\n}\nexport function quizSetState(answerState, results) {\n  return {\n    type: QUIZ_SET_STATE,\n    answerState,\n    results\n  };\n}\nexport function finishQuiz() {\n  return {\n    type: FINISH_QUIZ\n  };\n}\nexport function quizNextQuestion(number) {\n  return {\n    type: QUIZ_NEXT_QUESTION,\n    number\n  };\n}\nexport function retryQuiz() {\n  return {\n    type: QUIZ_RETRY\n  };\n}\nexport function quizAnswerClick(answerId) {\n  return (dispatch, getState) => {\n    const state = getState().quiz;\n\n    if (state.answerState) {\n      const key = Object.keys(state.answerState)[0];\n\n      if (state.answerState[key] === \"success\") {\n        return;\n      }\n    }\n\n    const question = state.quiz[state.activeQuestion];\n    const results = state.results; // верно ответил?\n\n    if (question.rightAnswerId === answerId) {\n      if (!results[question.id]) {\n        results[question.id] = \"success\";\n      }\n\n      dispatch(quizSetState({\n        [answerId]: \"success\"\n      }, results));\n      const timeout = window.setTimeout(() => {\n        // законился ли массив воросов\n        if (isQuizFinished(state)) {\n          dispatch(finishQuiz());\n        } else {\n          dispatch(quizNextQuestion(state.activeQuestion + 1));\n        }\n\n        window.clearTimeout(timeout);\n      }, 1000);\n    } else {\n      results[question.id] = \"error\";\n      dispatch(quizSetState({\n        [answerId]: \"error\"\n      }, results));\n    }\n  };\n}\n\nfunction isQuizFinished(state) {\n  return state.activeQuestion + 1 === state.quiz.length;\n}","map":{"version":3,"sources":["C:/Users/fepif/Desktop/projects/quiz/QUIZ/src/store/actions/quiz.js"],"names":["axios","FETCH_QUIZES_START","FETCH_QUIZES_SUCCESS","FETCH_QUIZES_ERROR","FETCH_QUIZ_SUCCESS","QUIZ_SET_STATE","FINISH_QUIZ","QUIZ_NEXT_QUESTION","QUIZ_RETRY","fetchQuizes","dispatch","fetchQuizesStart","get","response","quizes","Object","keys","data","forEach","key","index","push","id","name","fetchQuizesSuccess","fetchQuizesError","fetchQuizById","quizId","quiz","fetchQuizSuccess","type","e","error","quizSetState","answerState","results","finishQuiz","quizNextQuestion","number","retryQuiz","quizAnswerClick","answerId","getState","state","question","activeQuestion","rightAnswerId","timeout","window","setTimeout","isQuizFinished","clearTimeout","length"],"mappings":"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","sourcesContent":["import axios from \"../../axios/axios-quiz\";\r\nimport {\r\n  FETCH_QUIZES_START,\r\n  FETCH_QUIZES_SUCCESS,\r\n  FETCH_QUIZES_ERROR,\r\n  FETCH_QUIZ_SUCCESS,\r\n  QUIZ_SET_STATE,\r\n  FINISH_QUIZ,\r\n  QUIZ_NEXT_QUESTION,\r\n  QUIZ_RETRY\r\n} from \"./actionTypes\";\r\n\r\n// QUIZ LIST\r\nexport function fetchQuizes() {\r\n  return async dispatch => {\r\n    dispatch(fetchQuizesStart());\r\n\r\n    try {\r\n      const response = await axios.get(\"/quizes.json\");\r\n      const quizes = [];\r\n\r\n      Object.keys(response.data).forEach((key, index) => {\r\n        quizes.push({\r\n          id: key,\r\n          name: `Тест №${index + 1}`\r\n        });\r\n      });\r\n\r\n      dispatch(fetchQuizesSuccess(quizes));\r\n    } catch (e) {\r\n      dispatch(fetchQuizesError(e));\r\n    }\r\n  };\r\n}\r\n// QUIZ\r\nexport function fetchQuizById(quizId) {\r\n  return async dispatch => {\r\n    dispatch(fetchQuizesStart());\r\n\r\n    try {\r\n      const response = await axios.get(`/quizes/${quizId}.json`);\r\n      const quiz = response.data;\r\n      dispatch(fetchQuizSuccess(quiz));\r\n    } catch (e) {\r\n      dispatch(fetchQuizesError(e));\r\n    }\r\n  };\r\n}\r\nexport function fetchQuizSuccess(quiz) {\r\n  return {\r\n    type: FETCH_QUIZ_SUCCESS,\r\n    quiz\r\n  };\r\n}\r\n\r\nexport function fetchQuizesStart() {\r\n  return {\r\n    type: FETCH_QUIZES_START\r\n  };\r\n}\r\n\r\nexport function fetchQuizesSuccess(quizes) {\r\n  return {\r\n    type: FETCH_QUIZES_SUCCESS,\r\n    quizes\r\n  };\r\n}\r\n\r\nexport function fetchQuizesError(e) {\r\n  return {\r\n    type: FETCH_QUIZES_ERROR,\r\n    error: e\r\n  };\r\n}\r\n\r\nexport function quizSetState(answerState, results) {\r\n  return {\r\n    type: QUIZ_SET_STATE,\r\n    answerState,\r\n    results\r\n  };\r\n}\r\n\r\nexport function finishQuiz() {\r\n  return {\r\n    type: FINISH_QUIZ\r\n  };\r\n}\r\n\r\nexport function quizNextQuestion(number) {\r\n  return {\r\n    type: QUIZ_NEXT_QUESTION,\r\n    number\r\n  };\r\n}\r\n\r\nexport function retryQuiz() {\r\n  return {\r\n    type: QUIZ_RETRY\r\n  };\r\n}\r\nexport function quizAnswerClick(answerId) {\r\n  return (dispatch, getState) => {\r\n    const state = getState().quiz;\r\n\r\n    if (state.answerState) {\r\n      const key = Object.keys(state.answerState)[0];\r\n      if (state.answerState[key] === \"success\") {\r\n        return;\r\n      }\r\n    }\r\n    const question = state.quiz[state.activeQuestion];\r\n    const results = state.results;\r\n\r\n    // верно ответил?\r\n    if (question.rightAnswerId === answerId) {\r\n      if (!results[question.id]) {\r\n        results[question.id] = \"success\";\r\n      }\r\n      dispatch(quizSetState({ [answerId]: \"success\" }, results));\r\n\r\n      const timeout = window.setTimeout(() => {\r\n        // законился ли массив воросов\r\n        if (isQuizFinished(state)) {\r\n          dispatch(finishQuiz());\r\n        } else {\r\n          dispatch(quizNextQuestion(state.activeQuestion + 1));\r\n        }\r\n\r\n        window.clearTimeout(timeout);\r\n      }, 1000);\r\n    } else {\r\n      results[question.id] = \"error\";\r\n      dispatch(quizSetState({ [answerId]: \"error\" }, results));\r\n    }\r\n  };\r\n}\r\n\r\nfunction isQuizFinished(state) {\r\n  return state.activeQuestion + 1 === state.quiz.length;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}