{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\fepif\\\\Desktop\\\\projects\\\\quiz\\\\QUIZ\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\fepif\\\\Desktop\\\\projects\\\\quiz\\\\quiz\\\\src\\\\Containers\\\\QuizCreator\\\\QuizCreator.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./QuizCreator.css\";\nimport Button from \"../../Components/UI/Button/button\";\nimport Input from \"../../Components/UI/Input/Input\";\nimport Select from \"../../Components/UI/Select/Select\";\nimport { createControl, validate, validateForm } from \"../../Form/FormFramework\";\nimport Auxiliary from \"../../hoc/Auxiliary/Auxiliary\";\nimport { connect } from \"react-redux\";\nimport { createQuizQuestion as _createQuizQuestion, finishCreateQuiz as _finishCreateQuiz } from \"../../store/actions/create\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction createOptionControl(number) {\n  return createControl({\n    label: \"\\u0412\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442 \".concat(number),\n    errorMessage: \"Значение не может быть пустым\",\n    id: number\n  }, {\n    required: true\n  });\n}\n\nfunction createFormControls() {\n  return {\n    question: createControl({\n      label: \"Введите вопрос\",\n      errorMessage: \"Вопрос не может быть пустым\"\n    }, {\n      required: true\n    }),\n    option1: createOptionControl(1),\n    option2: createOptionControl(2),\n    option3: createOptionControl(3),\n    option4: createOptionControl(4)\n  };\n} // CLASS ---------------------------------------------------------------------------------------->\n\n\nclass QuizCreator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFormValid: false,\n      rightAnswerId: 1,\n      formControls: createFormControls(),\n      titleOfTest: \"\",\n      author: \"\",\n      isQuizStart: false,\n      isQuizFinished: false\n    };\n\n    this.sibmitHandler = event => {\n      event.preventDefault();\n    };\n\n    this.addQuestionHandler = event => {\n      event.preventDefault();\n      const _this$state$formContr = this.state.formControls,\n            question = _this$state$formContr.question,\n            option1 = _this$state$formContr.option1,\n            option2 = _this$state$formContr.option2,\n            option3 = _this$state$formContr.option3,\n            option4 = _this$state$formContr.option4;\n      const questionItem = {\n        question: question.value,\n        id: this.props.quizItem.quiz.length + 1,\n        rightAnswerId: this.state.rightAnswerId,\n        answers: [{\n          text: option1.value,\n          id: option1.id\n        }, {\n          text: option2.value,\n          id: option2.id\n        }, {\n          text: option3.value,\n          id: option3.id\n        }, {\n          text: option4.value,\n          id: option4.id\n        }]\n      };\n      this.props.createQuizQuestion(questionItem, this.state.author, this.state.titleOfTest);\n      this.setState({\n        isFormValid: false,\n        rightAnswerId: 1,\n        formControls: createFormControls()\n      });\n    };\n\n    this.createQuizHandler = event => {\n      event.preventDefault();\n      this.setState({\n        isFormValid: false,\n        rightAnswerId: 1,\n        formControls: createFormControls()\n      });\n      this.props.finishCreateQuiz();\n    };\n\n    this.changeHandler = (value, controlName) => {\n      const formControls = _objectSpread({}, this.state.formControls);\n\n      const control = _objectSpread({}, formControls[controlName]);\n\n      control.touched = true;\n      control.value = value;\n      control.valid = validate(control.value, control.validation);\n      formControls[controlName] = control;\n      this.setState({\n        formControls,\n        isFormValid: validateForm(formControls)\n      });\n    };\n\n    this.changeHandlerStart = (value, type) => {\n      if (type === \"titleOfTest\") {\n        this.setState({\n          titleOfTest: value\n        });\n      } else {\n        this.setState({\n          author: value\n        });\n      }\n    };\n\n    this.submitStartQuizHandler = () => {\n      this.setState({\n        isQuizStart: true\n      });\n    };\n\n    this.selectChangeHandler = event => {\n      this.setState({\n        rightAnswerId: +event.target.value\n      });\n    };\n\n    this.endCreateQuizHandler = () => {\n      this.setState({\n        isQuizStart: false,\n        isQuizFinished: false\n      });\n    };\n  }\n\n  renderControls() {\n    return Object.keys(this.state.formControls).map((controlName, index) => {\n      const control = this.state.formControls[controlName];\n      return React.createElement(Auxiliary, {\n        key: controlName + index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Input, {\n        label: control.label,\n        value: control.value,\n        valid: control.valid,\n        shouldValidate: !!control.validation,\n        touched: control.touched,\n        errorMessage: control.errorMessage,\n        onChange: event => this.changeHandler(event.target.value, controlName),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }));\n    });\n  }\n\n  // END ----------------------------------------------------------------------------->\n  // RENDER ----------------------------------------------------------------------------->\n  render() {\n    const select = React.createElement(Select, {\n      label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u044B\\u0439 \\u043E\\u0442\\u0432\\u0435\\u0442\",\n      value: this.state.rightAnswerId,\n      onChange: this.selectChangeHandler,\n      options: [{\n        text: 1,\n        value: 1\n      }, {\n        text: 2,\n        value: 2\n      }, {\n        text: 3,\n        value: 3\n      }, {\n        text: 4,\n        value: 4\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    });\n    const StartWindow = React.createElement(\"div\", {\n      className: \"QuizCreator__start-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(Input, {\n      label: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\",\n      value: this.state.titleOfTest,\n      valid: true,\n      shouldValidate: true,\n      touched: true,\n      errorMessage: \"dddd\",\n      onChange: event => this.changeHandlerStart(event.target.value, \"titleOfTest\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(Input, {\n      label: \"\\u0410\\u0432\\u0442\\u043E\\u0440 \\u0442\\u0435\\u0441\\u0442\\u0430\",\n      value: this.state.author,\n      valid: true,\n      shouldValidate: true,\n      touched: true,\n      errorMessage: \"dddd\",\n      onChange: event => this.changeHandlerStart(event.target.value, \"author\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.submitStartQuizHandler,\n      disabled: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"\\u0414\\u0430\\u043B\\u0435\\u0435\"));\n    const EndWindow = React.createElement(\"div\", {\n      className: \"QuizCreator__end-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"\\u0413\\u043E\\u0442\\u043E\\u0432\\u043E, \\u0442\\u0435\\u0441\\u0442 \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\"), React.createElement(NavLink, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => {\n        this.endCreateQuizHandler();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"\\u041A \\u0441\\u043F\\u0438\\u0441\\u043A\\u0443 \\u0442\\u0435\\u0441\\u0442\\u043E\\u0432\")));\n    return React.createElement(\"div\", {\n      className: \"QuizCreator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, !this.state.isQuizStart ? StartWindow : null, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, this.renderControls(), select, React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.addQuestionHandler,\n      disabled: !this.state.isFormValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\"), React.createElement(Button, {\n      type: \"success\",\n      onClick: this.createQuizHandler,\n      disabled: this.props.quizItem.quiz.length === 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\"))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    quizItem: state.create.quizItem\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createQuizQuestion: (item, author, title) => dispatch(_createQuizQuestion(item, author, title)),\n    finishCreateQuiz: () => dispatch(_finishCreateQuiz())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizCreator);","map":{"version":3,"sources":["C:/Users/fepif/Desktop/projects/quiz/quiz/src/Containers/QuizCreator/QuizCreator.js"],"names":["React","Component","classes","Button","Input","Select","createControl","validate","validateForm","Auxiliary","connect","createQuizQuestion","finishCreateQuiz","NavLink","createOptionControl","number","label","errorMessage","id","required","createFormControls","question","option1","option2","option3","option4","QuizCreator","state","isFormValid","rightAnswerId","formControls","titleOfTest","author","isQuizStart","isQuizFinished","sibmitHandler","event","preventDefault","addQuestionHandler","questionItem","value","props","quizItem","quiz","length","answers","text","setState","createQuizHandler","changeHandler","controlName","control","touched","valid","validation","changeHandlerStart","type","submitStartQuizHandler","selectChangeHandler","target","endCreateQuizHandler","renderControls","Object","keys","map","index","render","select","StartWindow","EndWindow","submitHandler","mapStateToProps","create","mapDispatchToProps","dispatch","item","title"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport classes from \"./QuizCreator.css\";\r\nimport Button from \"../../Components/UI/Button/button\";\r\nimport Input from \"../../Components/UI/Input/Input\";\r\nimport Select from \"../../Components/UI/Select/Select\";\r\nimport {\r\n  createControl,\r\n  validate,\r\n  validateForm\r\n} from \"../../Form/FormFramework\";\r\nimport Auxiliary from \"../../hoc/Auxiliary/Auxiliary\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  createQuizQuestion,\r\n  finishCreateQuiz\r\n} from \"../../store/actions/create\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction createOptionControl(number) {\r\n  return createControl(\r\n    {\r\n      label: `Вариант ${number}`,\r\n      errorMessage: \"Значение не может быть пустым\",\r\n      id: number\r\n    },\r\n    { required: true }\r\n  );\r\n}\r\n\r\nfunction createFormControls() {\r\n  return {\r\n    question: createControl(\r\n      {\r\n        label: \"Введите вопрос\",\r\n        errorMessage: \"Вопрос не может быть пустым\"\r\n      },\r\n      { required: true }\r\n    ),\r\n    option1: createOptionControl(1),\r\n    option2: createOptionControl(2),\r\n    option3: createOptionControl(3),\r\n    option4: createOptionControl(4)\r\n  };\r\n}\r\n// CLASS ---------------------------------------------------------------------------------------->\r\nclass QuizCreator extends Component {\r\n  // STATE -------------------------------------------------------------------------------------->\r\n  state = {\r\n    isFormValid: false,\r\n    rightAnswerId: 1,\r\n    formControls: createFormControls(),\r\n    titleOfTest: \"\",\r\n    author: \"\",\r\n    isQuizStart: false,\r\n    isQuizFinished: false\r\n  };\r\n\r\n  // Start -------------------------------------------------------------------------------------->\r\n\r\n  sibmitHandler = event => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  addQuestionHandler = event => {\r\n    event.preventDefault();\r\n\r\n    const {\r\n      question,\r\n      option1,\r\n      option2,\r\n      option3,\r\n      option4\r\n    } = this.state.formControls;\r\n\r\n    const questionItem = {\r\n      question: question.value,\r\n      id: this.props.quizItem.quiz.length + 1,\r\n      rightAnswerId: this.state.rightAnswerId,\r\n      answers: [\r\n        { text: option1.value, id: option1.id },\r\n        { text: option2.value, id: option2.id },\r\n        { text: option3.value, id: option3.id },\r\n        { text: option4.value, id: option4.id }\r\n      ]\r\n    };\r\n    this.props.createQuizQuestion(\r\n      questionItem,\r\n      this.state.author,\r\n      this.state.titleOfTest\r\n    );\r\n\r\n    this.setState({\r\n      isFormValid: false,\r\n      rightAnswerId: 1,\r\n      formControls: createFormControls()\r\n    });\r\n  };\r\n\r\n  createQuizHandler = event => {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      isFormValid: false,\r\n      rightAnswerId: 1,\r\n      formControls: createFormControls()\r\n    });\r\n    this.props.finishCreateQuiz();\r\n  };\r\n\r\n  changeHandler = (value, controlName) => {\r\n    const formControls = { ...this.state.formControls };\r\n    const control = { ...formControls[controlName] };\r\n\r\n    control.touched = true;\r\n    control.value = value;\r\n    control.valid = validate(control.value, control.validation);\r\n\r\n    formControls[controlName] = control;\r\n\r\n    this.setState({\r\n      formControls,\r\n      isFormValid: validateForm(formControls)\r\n    });\r\n  };\r\n  changeHandlerStart = (value, type) => {\r\n    if (type === \"titleOfTest\") {\r\n      this.setState({\r\n        titleOfTest: value\r\n      });\r\n    } else {\r\n      this.setState({\r\n        author: value\r\n      });\r\n    }\r\n  };\r\n  submitStartQuizHandler = () => {\r\n    this.setState({\r\n      isQuizStart: true\r\n    });\r\n  };\r\n  renderControls() {\r\n    return Object.keys(this.state.formControls).map((controlName, index) => {\r\n      const control = this.state.formControls[controlName];\r\n\r\n      return (\r\n        <Auxiliary key={controlName + index}>\r\n          <Input\r\n            label={control.label}\r\n            value={control.value}\r\n            valid={control.valid}\r\n            shouldValidate={!!control.validation}\r\n            touched={control.touched}\r\n            errorMessage={control.errorMessage}\r\n            onChange={event =>\r\n              this.changeHandler(event.target.value, controlName)\r\n            }\r\n          />\r\n        </Auxiliary>\r\n      );\r\n    });\r\n  }\r\n\r\n  selectChangeHandler = event => {\r\n    this.setState({\r\n      rightAnswerId: +event.target.value\r\n    });\r\n  };\r\n  endCreateQuizHandler = () => {\r\n    this.setState({\r\n      isQuizStart: false,\r\n      isQuizFinished: false\r\n    });\r\n  };\r\n  // END ----------------------------------------------------------------------------->\r\n\r\n  // RENDER ----------------------------------------------------------------------------->\r\n  render() {\r\n    const select = (\r\n      <Select\r\n        label=\"Выберите правильный ответ\"\r\n        value={this.state.rightAnswerId}\r\n        onChange={this.selectChangeHandler}\r\n        options={[\r\n          { text: 1, value: 1 },\r\n          { text: 2, value: 2 },\r\n          { text: 3, value: 3 },\r\n          { text: 4, value: 4 }\r\n        ]}\r\n      />\r\n    );\r\n    const StartWindow = (\r\n      <div className=\"QuizCreator__start-wrapper\">\r\n        <Input\r\n          label=\"Название теста\"\r\n          value={this.state.titleOfTest}\r\n          valid={true}\r\n          shouldValidate={true}\r\n          touched={true}\r\n          errorMessage=\"dddd\"\r\n          onChange={event =>\r\n            this.changeHandlerStart(event.target.value, \"titleOfTest\")\r\n          }\r\n        />\r\n        <Input\r\n          label=\"Автор теста\"\r\n          value={this.state.author}\r\n          valid={true}\r\n          shouldValidate={true}\r\n          touched={true}\r\n          errorMessage=\"dddd\"\r\n          onChange={event =>\r\n            this.changeHandlerStart(event.target.value, \"author\")\r\n          }\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={this.submitStartQuizHandler}\r\n          disabled={false}\r\n        >\r\n          Далее\r\n        </Button>\r\n      </div>\r\n    );\r\n    const EndWindow = (\r\n      <div className=\"QuizCreator__end-wrapper\">\r\n        <div>Готово, тест создан</div>\r\n        <NavLink to=\"/\">\r\n          <Button\r\n            onClick={() => {\r\n              this.endCreateQuizHandler();\r\n            }}\r\n          >\r\n            К списку тестов\r\n          </Button>\r\n        </NavLink>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"QuizCreator\">\r\n        <h1>Создание теста</h1>\r\n        <div>\r\n          {!this.state.isQuizStart ? StartWindow : null}\r\n          <form onSubmit={this.submitHandler}>\r\n            {this.renderControls()}\r\n\r\n            {select}\r\n\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={this.addQuestionHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >\r\n              Добавить вопрос\r\n            </Button>\r\n\r\n            <Button\r\n              type=\"success\"\r\n              onClick={this.createQuizHandler}\r\n              disabled={this.props.quizItem.quiz.length === 0}\r\n            >\r\n              {/* {this.props.quizItem.quiz.length === 0} */}\r\n              Создать тест\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    quizItem: state.create.quizItem\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    createQuizQuestion: (item, author, title) =>\r\n      dispatch(createQuizQuestion(item, author, title)),\r\n    finishCreateQuiz: () => dispatch(finishCreateQuiz())\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizCreator);\r\n"]},"metadata":{},"sourceType":"module"}