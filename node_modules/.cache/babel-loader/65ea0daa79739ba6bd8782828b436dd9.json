{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\fepif\\\\Desktop\\\\projects\\\\quiz\\\\QUIZ\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\fepif\\\\Desktop\\\\projects\\\\quiz\\\\quiz\\\\src\\\\Containers\\\\QuizCreator\\\\QuizCreator.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./QuizCreator.css\";\nimport Button from \"../../Components/UI/Button/button\";\nimport Input from \"../../Components/UI/Input/Input\";\nimport Select from \"../../Components/UI/Select/Select\";\nimport { createControl, validate, validateForm } from \"../../Form/FormFramework\";\nimport Auxiliary from \"../../hoc/Auxiliary/Auxiliary\";\nimport { connect } from \"react-redux\";\nimport { createQuizQuestion as _createQuizQuestion, finishCreateQuiz as _finishCreateQuiz } from \"../../store/actions/create\";\n\nfunction createOptionControl(number) {\n  return createControl({\n    label: \"\\u0412\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442 \".concat(number),\n    errorMessage: \"Значение не может быть пустым\",\n    id: number\n  }, {\n    required: true\n  });\n}\n\nfunction createFormControls() {\n  return {\n    question: createControl({\n      label: \"Введите вопрос\",\n      errorMessage: \"Вопрос не может быть пустым\"\n    }, {\n      required: true\n    }),\n    option1: createOptionControl(1),\n    option2: createOptionControl(2),\n    option3: createOptionControl(3),\n    option4: createOptionControl(4)\n  };\n}\n\nclass QuizCreator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFormValid: false,\n      rightAnswerId: 1,\n      formControls: createFormControls()\n    };\n\n    this.sibmitHandler = event => {\n      event.preventDefault();\n    };\n\n    this.addQuestionHandler = event => {\n      event.preventDefault();\n      const _this$state$formContr = this.state.formControls,\n            question = _this$state$formContr.question,\n            option1 = _this$state$formContr.option1,\n            option2 = _this$state$formContr.option2,\n            option3 = _this$state$formContr.option3,\n            option4 = _this$state$formContr.option4;\n      const questionItem = {\n        question: question.value,\n        id: this.props.quiz.length + 1,\n        rightAnswerId: this.state.rightAnswerId,\n        answers: [{\n          text: option1.value,\n          id: option1.id\n        }, {\n          text: option2.value,\n          id: option2.id\n        }, {\n          text: option3.value,\n          id: option3.id\n        }, {\n          text: option4.value,\n          id: option4.id\n        }]\n      };\n      this.props.createQuizQuestion(questionItem);\n      this.setState({\n        isFormValid: false,\n        rightAnswerId: 1,\n        formControls: createFormControls()\n      });\n    };\n\n    this.createQuizHandler = event => {\n      event.preventDefault();\n      this.setState({\n        isFormValid: false,\n        rightAnswerId: 1,\n        formControls: createFormControls()\n      });\n      this.props.finishCreateQuiz();\n    };\n\n    this.changeHandler = (value, controlName) => {\n      const formControls = _objectSpread({}, this.state.formControls);\n\n      const control = _objectSpread({}, formControls[controlName]);\n\n      control.touched = true;\n      control.value = value;\n      control.valid = validate(control.value, control.validation);\n      formControls[controlName] = control;\n      this.setState({\n        formControls,\n        isFormValid: validateForm(formControls)\n      });\n    };\n\n    this.selectChangeHandler = event => {\n      this.setState({\n        rightAnswerId: +event.target.value\n      });\n    };\n  }\n\n  renderControls() {\n    return Object.keys(this.state.formControls).map((controlName, index) => {\n      const control = this.state.formControls[controlName];\n      return React.createElement(Auxiliary, {\n        key: controlName + index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Input, {\n        label: control.label,\n        value: control.value,\n        valid: control.valid,\n        shouldValidate: !!control.validation,\n        touched: control.touched,\n        errorMessage: control.errorMessage,\n        onChange: event => this.changeHandler(event.target.value, controlName),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }));\n    });\n  }\n\n  render() {\n    const select = React.createElement(Select, {\n      label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u044B\\u0439 \\u043E\\u0442\\u0432\\u0435\\u0442\",\n      value: this.state.rightAnswerId,\n      onChange: this.selectChangeHandler,\n      options: [{\n        text: 1,\n        value: 1\n      }, {\n        text: 2,\n        value: 2\n      }, {\n        text: 3,\n        value: 3\n      }, {\n        text: 4,\n        value: 4\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: \"QuizCreator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.renderControls(), select, React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.addQuestionHandler,\n      disabled: !this.state.isFormValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\"), React.createElement(Button, {\n      type: \"success\",\n      onClick: this.createQuizHandler,\n      disabled: this.props.quiz.length === 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, console.log(this.props), \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\"))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    quiz: state.create.quizItem.quiz\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createQuizQuestion: item => dispatch(_createQuizQuestion(item)),\n    finishCreateQuiz: () => dispatch(_finishCreateQuiz())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizCreator);","map":{"version":3,"sources":["C:/Users/fepif/Desktop/projects/quiz/quiz/src/Containers/QuizCreator/QuizCreator.js"],"names":["React","Component","classes","Button","Input","Select","createControl","validate","validateForm","Auxiliary","connect","createQuizQuestion","finishCreateQuiz","createOptionControl","number","label","errorMessage","id","required","createFormControls","question","option1","option2","option3","option4","QuizCreator","state","isFormValid","rightAnswerId","formControls","sibmitHandler","event","preventDefault","addQuestionHandler","questionItem","value","props","quiz","length","answers","text","setState","createQuizHandler","changeHandler","controlName","control","touched","valid","validation","selectChangeHandler","target","renderControls","Object","keys","map","index","render","select","submitHandler","console","log","mapStateToProps","create","quizItem","mapDispatchToProps","dispatch","item"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport classes from \"./QuizCreator.css\";\r\nimport Button from \"../../Components/UI/Button/button\";\r\nimport Input from \"../../Components/UI/Input/Input\";\r\nimport Select from \"../../Components/UI/Select/Select\";\r\nimport {\r\n  createControl,\r\n  validate,\r\n  validateForm\r\n} from \"../../Form/FormFramework\";\r\nimport Auxiliary from \"../../hoc/Auxiliary/Auxiliary\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  createQuizQuestion,\r\n  finishCreateQuiz\r\n} from \"../../store/actions/create\";\r\n\r\nfunction createOptionControl(number) {\r\n  return createControl(\r\n    {\r\n      label: `Вариант ${number}`,\r\n      errorMessage: \"Значение не может быть пустым\",\r\n      id: number\r\n    },\r\n    { required: true }\r\n  );\r\n}\r\n\r\nfunction createFormControls() {\r\n  return {\r\n    question: createControl(\r\n      {\r\n        label: \"Введите вопрос\",\r\n        errorMessage: \"Вопрос не может быть пустым\"\r\n      },\r\n      { required: true }\r\n    ),\r\n    option1: createOptionControl(1),\r\n    option2: createOptionControl(2),\r\n    option3: createOptionControl(3),\r\n    option4: createOptionControl(4)\r\n  };\r\n}\r\n\r\nclass QuizCreator extends Component {\r\n  state = {\r\n    isFormValid: false,\r\n    rightAnswerId: 1,\r\n    formControls: createFormControls()\r\n  };\r\n\r\n  sibmitHandler = event => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  addQuestionHandler = event => {\r\n    event.preventDefault();\r\n\r\n    const {\r\n      question,\r\n      option1,\r\n      option2,\r\n      option3,\r\n      option4\r\n    } = this.state.formControls;\r\n\r\n    const questionItem = {\r\n      question: question.value,\r\n      id: this.props.quiz.length + 1,\r\n      rightAnswerId: this.state.rightAnswerId,\r\n      answers: [\r\n        { text: option1.value, id: option1.id },\r\n        { text: option2.value, id: option2.id },\r\n        { text: option3.value, id: option3.id },\r\n        { text: option4.value, id: option4.id }\r\n      ]\r\n    };\r\n\r\n    this.props.createQuizQuestion(questionItem);\r\n\r\n    this.setState({\r\n      isFormValid: false,\r\n      rightAnswerId: 1,\r\n      formControls: createFormControls()\r\n    });\r\n  };\r\n\r\n  createQuizHandler = event => {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      isFormValid: false,\r\n      rightAnswerId: 1,\r\n      formControls: createFormControls()\r\n    });\r\n    this.props.finishCreateQuiz();\r\n  };\r\n\r\n  changeHandler = (value, controlName) => {\r\n    const formControls = { ...this.state.formControls };\r\n    const control = { ...formControls[controlName] };\r\n\r\n    control.touched = true;\r\n    control.value = value;\r\n    control.valid = validate(control.value, control.validation);\r\n\r\n    formControls[controlName] = control;\r\n\r\n    this.setState({\r\n      formControls,\r\n      isFormValid: validateForm(formControls)\r\n    });\r\n  };\r\n\r\n  renderControls() {\r\n    return Object.keys(this.state.formControls).map((controlName, index) => {\r\n      const control = this.state.formControls[controlName];\r\n\r\n      return (\r\n        <Auxiliary key={controlName + index}>\r\n          <Input\r\n            label={control.label}\r\n            value={control.value}\r\n            valid={control.valid}\r\n            shouldValidate={!!control.validation}\r\n            touched={control.touched}\r\n            errorMessage={control.errorMessage}\r\n            onChange={event =>\r\n              this.changeHandler(event.target.value, controlName)\r\n            }\r\n          />\r\n        </Auxiliary>\r\n      );\r\n    });\r\n  }\r\n\r\n  selectChangeHandler = event => {\r\n    this.setState({\r\n      rightAnswerId: +event.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const select = (\r\n      <Select\r\n        label=\"Выберите правильный ответ\"\r\n        value={this.state.rightAnswerId}\r\n        onChange={this.selectChangeHandler}\r\n        options={[\r\n          { text: 1, value: 1 },\r\n          { text: 2, value: 2 },\r\n          { text: 3, value: 3 },\r\n          { text: 4, value: 4 }\r\n        ]}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <div className=\"QuizCreator\">\r\n        <h1>Создание теста</h1>\r\n        <div>\r\n          <form onSubmit={this.submitHandler}>\r\n            {this.renderControls()}\r\n\r\n            {select}\r\n\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={this.addQuestionHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >\r\n              Добавить вопрос\r\n            </Button>\r\n\r\n            <Button\r\n              type=\"success\"\r\n              onClick={this.createQuizHandler}\r\n              disabled={this.props.quiz.length === 0}\r\n            >\r\n              {console.log(this.props)}\r\n              {/* {this.props.quizItem.quiz.length === 0} */}\r\n              Создать тест\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    quiz: state.create.quizItem.quiz\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    createQuizQuestion: item => dispatch(createQuizQuestion(item)),\r\n    finishCreateQuiz: () => dispatch(finishCreateQuiz())\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizCreator);\r\n"]},"metadata":{},"sourceType":"module"}